generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model user {
  id           String  @id @unique @default(uuid())
  email        String  @unique
  full_name    String
  avatar_url   String?
  bio          String?
  location     String?
  website      String?
  twitter      String?
  linkedin     String?
  github       String?
  instagram    String?
  youtube      String?
  tiktok       String?
  discord      String?
  telegram     String?
  bsky         String?
  contactEmail String?
  username     String? @unique

  paid        Boolean @default(false)
  customer_id String?
  plan_id     String?

  created_at DateTime    @default(now())
  updated_at DateTime    @updatedAt
  feedback   feedback[]
  skills     skills[]
  projects   projects[]
  education  education[]
  hobbies    hobbies[]
  stack      stack[]
  vips       vips[]
}

model waitlist {
  id         String   @id @default(uuid())
  email      String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model feedback {
  id         String   @id @default(uuid())
  user_id    String
  user       user     @relation(fields: [user_id], references: [id])
  message    String   @db.Text
  rating     Int // 1-5 rating scale
  category   String // e.g. "bug", "feature-request", "general"
  status     String   @default("pending") // e.g. "pending", "in-review", "resolved"
  upvotes    Int      @default(0)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([user_id])
}

model skills {
  id       String @id @default(uuid())
  user_id  String
  user     user   @relation(fields: [user_id], references: [id])
  category String // leadership, business-development, financial, marketing, etc.
  skill_id String // team-building, vision-setting, etc.
  level    Int // 1-5 rating scale

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([user_id, category, skill_id])
  @@index([user_id])
}

model projects {
  id          String  @id @default(uuid())
  user_id     String
  user        user    @relation(fields: [user_id], references: [id])
  name        String
  description String
  url         String
  image_url   String
  category    String? // e.g. "web", "mobile", "desktop", "api", "database", "devOps", "testing", "security", "design", "marketing", "product", "other"
  status      String? // e.g. "active", "inactive", "in-progress", "completed", "on-hold", "cancelled", "other"
  tech_stack  String? // e.g. "React, Node.js, PostgreSQL, Docker, AWS, etc."
  tags        String? // e.g. "AI, ML, Blockchain, Web3, etc."

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model education {
  id             String   @id @default(uuid())
  user_id        String
  user           user     @relation(fields: [user_id], references: [id])
  school         String
  degree         String
  field_of_study String
  start_date     DateTime
  end_date       DateTime
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
}

model hobbies {
  id         String   @id @default(uuid())
  user_id    String
  user       user     @relation(fields: [user_id], references: [id])
  hobby      String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model stack {
  id          String   @id @default(uuid())
  user_id     String
  user        user     @relation(fields: [user_id], references: [id])
  category    String // frontend, backend, devOps, testing, mobile, versionControl
  subcategory String // languages, frameworks, styling, tools, CI_CD, libraries, methodologies
  item        String // The actual tech stack item like "React", "Node.js", etc.
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@unique([user_id, category, subcategory, item])
  @@index([user_id])
}

model vips {
  id         String   @id @unique
  username   String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       user?    @relation(fields: [userId], references: [id])
  userId     String?
}
